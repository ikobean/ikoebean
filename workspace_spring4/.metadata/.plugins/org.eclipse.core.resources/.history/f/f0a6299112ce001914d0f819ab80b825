<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.mybatis.mapper.BoardMapper">
<!-- resultMap id="mVO" type="com.vo.MemberVO"/>-->
	<!-- 트랜잭션처리 실습코드 -->
	<insert id="deptInsert" parameterType="map">
		insert into dept values(#{deptno},#{dname},#{loc})
	</insert>
	<insert id="empInsert" parameterType="map">
		insert into emp(empno, ename, job, mgr, hiredate, sal, comm, deptno)
					values(#{empno},#{ename},#{job}
						  ,#{mgr},to_char(sysdate,'YYYY-MM-DD')
						  ,#{sal},#{comm},#{deptno})
	</insert>
	<update id="hitCount" parameterType="int">
		update board_master_t
		   set bm_hit = bm_hit+1
		 where bm_no= #{value}
	</update>
	<select id="getTotal" parameterType="com.vo.BoardMasterVO" resultType="int">
		select count(bm.bm_no)
		 from board_master_t bm, board_sub_t bs
               where bm.bm_no = bs.bm_no(+)
          <!--제목 검색 -->
            <if test="cb_search!=null and cb_search.equals('bm_title')">
            	AND bm.bm_title LIKE '%'||#{keyword}||'%'
            </if>
          <!--내용 검색 -->
            <if test="cb_search!=null and cb_search.equals('bm_content')">
            	AND bm.bm_content LIKE '%'||#{keyword}||'%'
            </if>
          <!-- 작성자 검색 -->
            <if test="cb_search!=null and cb_search.equals('bm_writer')">
            	AND bm.bm_writer LIKE '%'||#{keyword}||'%'
            </if>
         <!--날짜 검색 -->
            <if test="bm_date!=null and bm_date.length()>0">
            	AND bm.bm_date LIKE '%'||#{bm_date}||'%'
            </if>
	</select>

	<delete id="boardSDel" parameterType="map">
			DELETE from board_sub_t 
			WHERE bm_no = #{bm_no}
	</delete>
	<delete id="boardMDel" parameterType="map">
		DELETE from board_master_t 
			WHERE bm_no = #{bm_no}
	</delete>
	<delete id="boardSDel" parameterType="map">
			DELETE from board_sub_t 
			WHERE bm_no IN
			<foreach item="item" index="index" collection="list"
				open="(" separator="," close=")">
				#{item}
			</foreach>
	</delete>
	<delete id="boardMDELALL" parameterType="list">
		DELETE from board_master_t 
			WHERE bm_no IN
			<foreach item="item" index="index" collection="list"
				open="(" separator="," close=")">
				#{item}
			</foreach>
	</delete>
	
	<select id="boardMdEL" parameterType="string" statementType="CALLABLE">
		{call delAll(#{value, jdbcType=VARCHAR, mode=OUT, javaType=java.lang.String})}
	</select> 
	
	<update id="bmStepUpdate" parameterType="map">
		update board_master_t
     		set bm_step = bm_step+1
     		where bm_group = #{bm_group}
     		<![CDATA[and bm_step>#{bm_step}]]>
	</update>
 	<update id="boardMUpd" parameterType="com.vo.BoardMasterVO">
		 UPDATE  board_master_t
			SET  bm_title = #{bm_title}
			    ,bm_writer= #{bm_writer}
			    ,bm_content= #{bm_content}
			    ,bm_email= #{bm_email}
			    ,bm_pw= #{bm_pw}
		   WHERE bm_no = #{bm_no}
	</update> 
	<!-- <update id="boardMUpd" parameterType="com.vo.BoardMasterVO">
		 UPDATE  board_master_t
			SET  bm_title = #{bm_title}
			    ,bm_writer= #{bm_writer}
			    ,bm_content= #{bm_content}
			    ,bm_date=to_char(sysdate, 'YYYY-MM-DD')
			    ,bm_pw= #{bm_pw}
			    ,bm_email= #{bm_email}
		   WHERE bm_no = #{bm_no}
	</update>  -->
	<update id="boardSUpd" parameterType="com.vo.BoardSubVO">
		 UPDATE  board_sub_t
			SET  bs_file   = #{bs_file}
			    ,bs_size   = #{bs_size}
		   WHERE bm_no  = #{bm_no}
		     AND bs_seq    = #{bs_seq}
	</update>
	
	<insert id="boardSAdd" parameterType="map">
		INSERT INTO BOARD_SUB_T(bm_no, bs_seq, bs_file, bs_size)
			VALUES (#{bm_no},1,#{bs_file},#{bs_size})
	</insert>
	<insert id="boardMAdd" parameterType="map">
	<!--  	<selectKey id="">
			select seq_board_no.nextval bno from dual
		</selectKey>-->
		insert into board_master_t(bm_no, bm_title, bm_writer,bm_email, bm_content
								 , bm_pw, bm_date, bm_group, bm_pos, bm_step)
						VALUES(#{bm_no}, #{bm_title}, #{bm_writer},#{bm_email}
							 	,#{bm_content},#{bm_pw} ,to_char(sysdate,'YYYY-MM-DD')
							 	,#{bm_group},#{bm_pos},#{bm_step}
							 	)
	</insert>
	<select id="boardList" parameterType="map" resultType="map">
		select bm_title, bm_writer, bm_date, NVL(bs_file,' ') bs_file
			 , bm_hit, bm_no, bm_content, bm_email
			 , bm_pos,bm_group,bm_step, bm_pw
       		from (
               select rownum rno, bm.bm_title, bm.bm_writer
               ,bm_content, bm.bm_no, bm.bm_email,bm.bm_pos, bm.bm_pw
               ,bm.bm_group, bm.bm_step,bm.bm_date, bs.bs_file, bm.bm_hit
               from board_master_t bm, board_sub_t bs
               where bm.bm_no = bs.bm_no(+)
            <!--제목 검색 -->
            <if test="cb_search!=null and cb_search.equals('bm_title')">
            	AND bm_title LIKE '%'||#{keyword}||'%'
            </if>
        	<!-- 내용 검색 --> 
            <if test="cb_search!=null and cb_search.equals('bm_content')">
            	AND bm_content LIKE '%'||#{keyword}||'%'
            </if>
        	<!--작성자 검색-->  
            <if test="cb_search!=null and cb_search.equals('bm_writer')">
            	AND bm_writer LIKE '%'||#{keyword}||'%'
            </if>
      	    <!--날짜 검색-->  
            <if test="bm_date!=null and bm_date.length()>0">
            	AND bm_date LIKE '%'||#{bm_date}||'%'
            </if>
               )a
            where 1=1
            <if test="start>0 and end>0">
<!--             CDATA 태그는 xml에서 제공하는 태그로 태그 안에 있는 문자열을 무조건 text 취급함. -->
       			<![CDATA[and rownum between #{start} and #{end}]]>
            </if>
       		 <!--상세 조회 페이지 처리--> 
            <if test="bm_no>0">
				and a.bm_no = #{bm_no}
            </if>
               order by bm_group desc, bm_step asc 
	</select>
<!--  
	글번호 채번하기
	시퀀스에 문제점 - 번호를 채번하고 마스터 테이블에 추가한 후 서브 테이블에 추가할 때
	그 번호를 유지할 수 있는 방법이 없다.
	왜냐하면 채번한 후에 현재 시퀀스 값을 확인할 수가 있는데 마스터 테이블에 insert하는 문장과
	서브 테이블에 insert하는 문장이 같은 쿼리문에 있지 않으므로 시퀀스를 사용하는 것이 불가함.
	따라서 글번호를 max값을 이용해서 채번하고 1을 더하여 다음 번호를 채번하도록 한다.
	만일 프로시저를 사용한다면 한 프로시저에서 처리하면 되니까 사용할 수 있을 것이다.
	
	두번째
	글 그룹번호도 글번호와 같은 상황일 것이다.
	시퀀스를 채번하여 사용하는 것이 아니라 원글에 대한 글 그룹 번호를 가져와서 사용해야 하는데
	채번하는 경우에는 에러가 발생하더라도 시퀀스 값은 무조건 새로운 값으로 채번이 일어나서
	연속되는 번호를 가질 수 없게 될 것이다.
	물론 연속값을 꼭 가져야하는 것은 아니지만 여기서는 일반 컬럼에 인덱스를 생성할 수 있다는 것을 
	활용해서 처리해 본다.
	-->
	
	<select id="getBmno" parameterType="int" resultType="int" >
		select nvl((select /*+index_desc(board_master_t BOARD_MNO_PK) */ bm_no 
		             from board_master_t
		            where rownum=1),0)+1 bm_no
		  from dual	 
	</select>
	<select id="getUBmno" parameterType="int" resultType="int" >
			 select bm_no
        		  from board_master_t
          		where bm_no=#{bm_no}
	</select>
	<select id="getBmgroup" parameterType="int" resultType="int">
		select nvl((select /*+index_desc(board_master_t i_group) */ bm_group 
                      from board_master_t
                     where rownum=1
                       and bm_group>0
                   ),0)+1 bm_group
  		 from dual
	</select>
	<select id="updatefile" parameterType="int" resultType="String">
		select bs.bs_file
		 from board_master_t bm, board_sub_t bs
               where bm.bm_no = bs.bm_no(+)
               And bm.bm_no=#{bm_no}
	
	</select>
	
</mapper> 
