/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-08-16 10:19:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mySNS;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.vo.SNSMessageVO;
import com.vo.SNSMessageSet;
import com.vo.SNSRepleVO;

public final class bootMsgList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.vo.SNSMessageSet");
    _jspx_imports_classes.add("com.vo.SNSRepleVO");
    _jspx_imports_classes.add("com.vo.SNSMessageVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");

	List<SNSMessageSet> msgList = null;
	msgList = (List<SNSMessageSet>)request.getAttribute("smsgList");
	int size = 0;
	if(msgList!=null)
		size = msgList.size();
	//out.print("size:"+size);

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction snsUpd(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$('#f_snsList').attr(\"method\",\"post\");\r\n");
      out.write("\t\t$('#f_snsList').attr(\"action\",\"/mySNS/test.mvc?crud=snsUpd&mno=\"+mno); //전송을 하는 곳.\r\n");
      out.write("\t\t$('#f_snsList').submit();\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction snsRep(){\r\n");
      out.write("\t\talert(\"zz\");\r\n");
      out.write("\t\t//$(\"#snsRep\").collapse('aria-expanded','true');\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction snsDel(mno){\r\n");
      out.write("\t\t//alert(\"del\");\r\n");
      out.write("\t\t$('#f_snsList').attr(\"method\",\"post\");\r\n");
      out.write("\t\t$('#f_snsList').attr(\"action\",\"/mySNS/test.mvc?crud=snsDel&mno=\"+mno); //전송을 하는 곳.\r\n");
      out.write("\t\t$('#f_snsList').submit();\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction favcnt(mno,fav){\t\t\r\n");
      out.write("\t\t//alert($(\"#mno\").val());\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\tmethod:\"get\"\r\n");
      out.write("\t\t   ,url:\"/mySNS/test.mvc?crud=favcnt&mno=\"+mno+\"&favcnt=\"+fav\r\n");
      out.write("\t\t   ,success:function(data){\r\n");
      out.write("/* \t\t\t   alert(data); */\r\n");
      out.write("\t\t\t   $(\"#d_msg\").html(data);\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t\t}); \r\n");
      out.write("\t}\r\n");
      out.write("</script>     \r\n");
      out.write("<div class=\"card bg-success text-white\">\r\n");

//전역변수
		int i=0;

      out.write('\r');
      out.write('\n');

	for(i=0;i<size;i++){
		SNSMessageSet smSet = msgList.get(i);
		SNSMessageVO smVO = smSet.getMsgVO();
		List<SNSRepleVO> reList = smSet.getReList();
		int rsize = 0;
		if(reList!=null){
			rsize = reList.size();
		}

      out.write("\r\n");
      out.write("<form id=\"f_snsList\">\r\n");
      out.write("\r\n");
      out.write("\t<input type=\"hidden\" id=\"mno\" name=\"mno\" value=\"");
      out.print(smSet.getMsgVO().getMno());
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" id=\"favcnt\" name=\"favcnt\" value=\"");
      out.print(smSet.getMsgVO().getFavcnt() );
      out.write("\">\t\r\n");
      out.write("   <div class=\"card-header \">\r\n");
      out.write("\t  <h5>");
      out.print(smSet.getMsgVO().getMem_id() );
      out.write("</h5>\r\n");
      out.write("\t  \t\t&nbsp;&nbsp;\r\n");
      out.write("\t  ");
      out.print(smSet.getMsgVO().getMsg() );
      out.write("<br>\r\n");
      out.write("\t  <div style=\"margin-bottom:30px\"></div>\r\n");
      out.write("\t  <span>\r\n");
      out.write("\t  \t\t&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \t");
      out.print(smSet.getMsgVO().getFavcnt());
      out.write("\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \t\t&nbsp;&nbsp;\r\n");
      out.write("\t  \t<a href=\"javascript:favcnt(");
      out.print(smSet.getMsgVO().getMno() );
      out.write(',');
      out.print(smSet.getMsgVO().getFavcnt());
      out.write(")\" role=\"button\" class=\"btn btn-outline-light btn-sm text-light\">♡</a>\r\n");
      out.write("\t \t\t &nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t  </span>\r\n");
      out.write("\t\t \t &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t\t \t &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t  <span>\r\n");
      out.write("\t\t<a role=\"button\" href=\"#snsRep\" data-toggle=\"collapse\"\r\n");
      out.write("\t\t   class=\"btn btn-success btn-sm\" id=\"btnRep\" name=\"btnRep\">댓글</a>\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t  <a role=\"button\" href=\"javascript:snsUpd\" class=\"btn btn-success btn-sm\" id=\"sns_upd\" name=\"sns_upd\">수정</a>\r\n");
      out.write("\t\t  <a role=\"button\" href=\"javascript:snsDel(");
      out.print(smSet.getMsgVO().getMno() );
      out.write(")\" class=\"btn btn-success btn-sm\" id=\"sns_del\" name=\"sns_del\">삭제</a>\r\n");
      out.write("\t  </span>\r\n");
      out.write("\t  \r\n");
      out.write("\t\t<div class=\"collapse\" id=\"snsRep\" name=\"snsRep\">\r\n");
      out.write("  \t\t<div  class=\"card-body bg-light text-dark\" >Basiccardsdfssdfghsdf</div>\r\n");
      out.write("  \t\t<a href=\"javascript:snsRep()\" style=\"align: right\">확인</a>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t\r\n");
      out.write("  </div>\r\n");
      out.write("</form>\t\r\n");
      out.write("\t  ");

		if(rsize>0){//친구 상태글에 대한 댓글이 존재하는 경우
			for(int j=0;j<rsize;j++){
				SNSRepleVO srVO = reList.get(j);

      out.write("  \r\n");
      out.write("  <div class=\"card-body bg-light text-dark\"  style=\"padding:10px\">\r\n");
      out.write("   ");
      out.print(srVO.getMem_id()+"님의 댓글");
      out.write("<br>\r\n");
      out.write("   &nbsp;&nbsp;\r\n");
      out.write("   ");
      out.print(srVO.getMsg() );
      out.write("</div>\r\n");
      out.write("       \r\n");

			}//end of inner for 상태글에 대한 댓글 출력
		}///////end of 댓글이 있을 때
	}/////////////////end of outter for
	

      out.write(" \r\n");
      out.write("\r\n");
      out.write("\t</div> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
