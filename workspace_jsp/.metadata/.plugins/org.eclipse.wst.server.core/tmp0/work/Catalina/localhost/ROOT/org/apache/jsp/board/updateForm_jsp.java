/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-08-14 02:01:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public final class updateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/JEasyUICommon.jsp", Long.valueOf(1564466205580L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	List<Map<String, Object>> updateForm
		=(List<Map<String, Object>>)request.getAttribute("updateForm");
   	Map<String,Object> rMap = new HashMap<>();
   	  /* 
   	    *마이바티스 사용시 자동으로 담아주므로 VO의 경우
   	    *사용자가 대소문자를 구분해서 사용하지만
   	    *Map의 경우 마이바티스가 컬럼명을 기준으로 자동으로 키값을 생성하는데 
   	    *디폴트가 대문자임.
   	    */
   	if(updateForm!=null){
   		rMap= updateForm.get(0);
   	}

      out.write('\r');
      out.write('\n');
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/themes/default/easyui.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/themes/icon.css?1\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/demo/demo.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/jquery.easyui.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/commons.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/jquery.cookie.js\"></script>");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<table id=\"pan_update\" class=\"easyui-panel\" title=\"글상세보기\" data-options=\" modal:'true', footer:'#tb_read'\"\r\n");
      out.write("\t\t   style=\"width:550px;height:380px;padding:10px; background:ivory;\">\r\n");
      out.write("\t\t    <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">제목</td>  \r\n");
      out.write("\t\t    \t<td width=\"500px\"> \r\n");
      out.write("\t\t    \t<input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_TITLE") );
      out.write("\" data-options=\"width:'250px', readonly:'true'\" id=\"bm_title\" name=\"bm_title\"></td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t       <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">작성자</td>\r\n");
      out.write("\t\t    \t<td width=\"500px\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_WRITER") );
      out.write("\" data-options=\"width:'250px', readonly:'true'\" id=\"bm_writer\" name=\"bm_writer\"></td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t       <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">이메일</td>\r\n");
      out.write("\t\t    \t<td width=\"500px\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_EMAIL") );
      out.write("\" data-options=\"width:'250px', readonly:'true'\" id=\"bm_email\" name=\"bm_email\"></td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t       <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">내용</td>\r\n");
      out.write("\t\t    \t<td width=\"500px\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BM_CONTENT") );
      out.write("\" data-options=\"width:'250px',height:'200px',multiline:'true', readonly:'true'\" id=\"bm_content\" name=\"bm_content\"></td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t       <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">비번</td>\r\n");
      out.write("\t\t    \t<td width=\"500px\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-passwordbox\" value=\"");
      out.print(rMap.get("BM_PW") );
      out.write("\" data-options=\"width:'250px'\" id=\"bm_pw\" name=\"bm_pw\" required></td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t    <tr>\r\n");
      out.write("\t\t    \t<td width=\"100px\">첨부파일</td>\r\n");
      out.write("\t\t    \t<td width=\"500px\">\r\n");
      out.write("\t\t    \t<span id=\"tb_file\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-textbox\" value=\"");
      out.print(rMap.get("BS_FILE"));
      out.write("\" data-options=\"width:'250px'\" id=\"bs_filee\">\r\n");
      out.write("\t\t    \t</span>\r\n");
      out.write("\t\t    \t<span id=\"bs_file_edit\">\r\n");
      out.write("\t\t    \t<input class=\"easyui-filebox\" id=\"filebox\" value=\"");
      out.print(rMap.get("BS_FILE"));
      out.write("\" data-options=\"width:'250px'\"  name=\"bs_file\">\r\n");
      out.write("\t   \t\t\t<a href=\"javascript:fileDel()\" class=\"easyui-linkbutton\" iconCls=\"icon-cancel\">파일삭제</a></td>\r\n");
      out.write("\t   \t\t\t</span>\r\n");
      out.write("\t   \t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\t\t<!-- 입력 화면 버튼 추가 -->\r\n");
      out.write("\t\t<div id=\"tb_read\" align=\"center\">\r\n");
      out.write("\t\t\t<a href=\"javascript:replyForm()\" class=\"easyui-linkbutton\" iconCls=\"icon-edit\"> 댓글</a>\r\n");
      out.write("\t\t\t<span id=\"upd\">\r\n");
      out.write("\t\t\t<a href=\"javascript:updatecheck()\"  class=\"easyui-linkbutton\" iconCls=\"icon-add\" > 수정</a>\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<span id=\"updsave\">\r\n");
      out.write("\t\t\t<a href=\"javascript:saveForm()\" class=\"easyui-linkbutton\" iconCls=\"icon-add\"> 수정저장</a>\r\n");
      out.write("\t\t<!-- \t<input href=\"javascript:saveForm()\"  class=\"easyui-linkbutton\" iconCls=\"icon-add\"> -->\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<a href=\"javascript:deleteForm()\" class=\"easyui-linkbutton\" iconCls=\"icon-remove\"> 삭제</a>\r\n");
      out.write("\t\t\t<a href=\"javascript:boardList()\" class=\"easyui-linkbutton\" iconCls=\"icon-search\" >목록</a>\r\n");
      out.write("\t\t</div>   \r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
